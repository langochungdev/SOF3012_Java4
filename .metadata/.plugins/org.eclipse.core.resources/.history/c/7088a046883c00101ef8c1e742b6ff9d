package DAO;

import java.util.List;
import Entity.User;
import Entity.Video;
import Utils.XJPA;
import jakarta.persistence.EntityManager;

public class UserDAOImpl implements UserDAO {
	EntityManager em = XJPA.getEntityManager();

	public List<User> findAll() {
		return em.createQuery("SELECT u FROM User u", User.class).getResultList();
	}

	public User findById(Long id) {
		return em.find(User.class, id);
	}

	public User findByIdOrEmail(String idOrEmail) {
		return em.createQuery("SELECT u FROM User u WHERE u.id = :idOrEmail OR u.email = :idOrEmail", User.class)
				.setParameter("idOrEmail", idOrEmail).getSingleResult();
	}

	// 2. Tìm video có title chứa từ khóa
	public List<Video> findByKeyword(String keyword) {
		return em.createQuery("SELECT v FROM Video v WHERE v.title LIKE :keyword", Video.class)
				.setParameter("keyword", "%" + keyword + "%").getResultList();
	}

	// 3. Truy vấn 10 video được yêu thích nhiều nhất
	public List<Video> findTop10MostFavorited() {
		return em.createQuery("SELECT v FROM Video v LEFT JOIN v.favorites f GROUP BY v ORDER BY COUNT(f) DESC",
				Video.class).setMaxResults(10).getResultList();
	}

	// 4. Tìm video không được ai thích
	public List<Video> findNotFavorited() {
		return em.createQuery("SELECT v FROM Video v WHERE v.favorites IS EMPTY", Video.class).getResultList();
	}

	// 5. Tìm video được chia sẻ trong năm 2024, sắp xếp theo thời gian
	public List<Video> findSharedIn2024() {
		return em.createQuery(
				"SELECT v FROM Video v JOIN v.favorites f WHERE YEAR(f.likeDate) = 2024 ORDER BY f.likeDate",
				Video.class).getResultList();
	}

	// 6. Thông tin chia sẻ tổng hợp của từng video
	public List<Object[]> getVideoShareSummary() {
		return em.createQuery(
				"SELECT v.title, COUNT(f) as shareCount, MIN(f.likeDate) as firstShare, MAX(f.likeDate) as lastShare FROM Video v LEFT JOIN v.favorites f GROUP BY v.title",
				Object[].class).getResultList();
	}

	public void create(User user) {
		em.getTransaction().begin();
		em.persist(user);
		em.getTransaction().commit();
	}

	public void update(User user) {
		em.getTransaction().begin();
		em.merge(user);
		em.getTransaction().commit();
	}

	public void deleteById(Long id) {
		em.getTransaction().begin();
		User user = em.find(User.class, id);
		if (user != null)
			em.remove(user);
		em.getTransaction().commit();
	}
}